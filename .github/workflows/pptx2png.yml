name: Pptx to Image
on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  # build:
  #   if: (github.actor == 'ogawa3427' || github.actor == 'MAPLE0212') && github.event_name == 'pull_request'
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: write
  #     statuses: write
  #     checks: write
  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: hello
  #       run: echo "hello"

  #     - name: check changed files
  #       id: check_changed_files
  #       uses: actions/github-script@v4
  #       with:
  #         script: |
  #           const { data: pullRequestFiles } = await github.pulls.listFiles({
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             pull_number: context.payload.pull_request.number
  #           });
  #           const changedFiles = pullRequestFiles.map(file => file.filename);
  #           const allowedFiles = ["2024quiz/quiz.pptx", "2024answer/answer.pptx"];
  #           const isAllowed = changedFiles.every(file => allowedFiles.includes(file));

  #           if (!isAllowed) {
  #             core.setFailed('Only changes to 2024quiz/quiz.pptx or 2024answer/answer.pptx are allowed');
  #           }

  # status_check:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   env:
  #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #   permissions:
  #     contents: write
  #     pull-requests: write
  #     statuses: write
  #     checks: write
  #   steps:
  #     - name: Check status
  #       run: echo "Status check passed"
  #     - name: Create status check
  #       run: |
  #         gh api repos/${{ github.repository }}/statuses/${{ github.sha }} \
  #           -f state=success \
  #           -f context="Status Check" \
  #           -f description="The build passed successfully" \
  #           -f target_url="${{ github.event.pull_request.html_url }}"
  #         gh api repos/${{ github.repository }}/statuses/${{ github.sha }} \
  #           -f state=success \
  #           -f context="Check" \
  #           -f description="The check passed successfully" \
  #           -f target_url="${{ github.event.pull_request.html_url }}"

  # merge:
  #   if: github.event_name == 'pull_request'
  #   needs: [build, status_check]
  #   runs-on: ubuntu-latest
  #   permissions:
  #     pull-requests: write
  #     contents: write
  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Set up GitHub CLI
  #       run: echo "${{ secrets.GITHUB_TOKEN }}" > ~/.gh_token
  #     - name: merge
  #       env:
  #         GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       run: |
  #         gh pr merge ${{ github.event.pull_request.number }} --squash --auto

  convert:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    # needs: [merge]
    steps:
      - name: clone
        run: |
          git clone https://github.com/ogawa3427/utils.git

      - name: pull and checkout
        run: |
          cd utils
          git branch -a
          echo "---"
          git branch -r
          echo "---"
          git checkout master || git checkout main
          git pull origin master --rebase --strategy-option theirs || git pull origin main --rebase --strategy-option theirs
          git checkout -b pptx-convert-${{ github.run_id }}
      
      - name: make dummy files
        env:
          RUN_ID: ${{ github.run_id }}
        run: |
          cd utils
          touch a.txt
          echo $RUN_ID > a.txt

      # - name: Update ImageMagick policy
      #   run: |
      #     sudo sed -i 's/<policy domain="coder" rights="none" pattern="PDF"/<policy domain="coder" rights="read|write" pattern="PDF"/' /etc/ImageMagick-6/policy.xml

      # - name: Install dependencies
      #   run: |
      #     sudo apt update
      #     sudo apt install -y tree
      #     tree -L 2
      #     sudo apt install -y libreoffice
      #     sudo apt install poppler-utils
      #     sudo apt install -y fonts-hanazono fonts-ipafont-gothic fonts-ipafont-mincho

      # - name: checkout
      #   uses: actions/checkout@v2

      # - name: -Q- Check if PPTX file exists
      #   run: |
      #     ls -la
      #     cd 2024quiz
      #     if [ ! -f "quiz.pptx" ]; then
      #       echo "PPTX file does not exist"
      #       exit 1
      #     fi

      # - name: -Q- Convert PPTX to Image
      #   run: |
      #     ls -la
      #     cd 2024quiz
      #     libreoffice --headless --convert-to pdf quiz.pptx --outdir .
      #     ls -la
      #     if [ ! -f "quiz.pdf" ]; then
      #       echo "PDF conversion failed"
      #       exit 1
      #     fi
      #     pdftoppm -png quiz.pdf quiz

      # - name: -A- Check if PPTX file exists
      #   run: |
      #     ls -la
      #     cd 2024answer
      #     if [ ! -f "answer.pptx" ]; then
      #       echo "PPTX file does not exist"
      #       exit 1
      #     fi

      # - name: -A- Convert PPTX to Image
      #   run: |
      #     ls -la
      #     cd 2024answer
      #     libreoffice --headless --convert-to pdf answer.pptx --outdir .
      #     ls -la
      #     if [ ! -f "answer.pdf" ]; then
      #       echo "PDF conversion failed"
      #       exit 1
      #     fi
      #     pdftoppm -png answer.pdf answer

      - name: Set up GitHub CLI
        run: |
          cd utils
          echo "${{ secrets.GITHUB_TOKEN }}" > ~/.gh_token
      
      - name: Create a commit
        env:
          RUN_ID: ${{ github.run_id }}
          PAT: ${{ secrets.PAT }}
          GITHUB_TOKEN: ${{ secrets.PAT }}
        run: |
          cd utils
          git remote add origin https://${{ secrets.GITHUB_TOKEN }}@github.com/ogawa3427/utils.git || true
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "AUTO Convert PPTX to Image"
          git push https://${{ secrets.PAT }}@github.com/ogawa3427/utils.git pptx-convert-${{ github.run_id }}

          gh pr create --title "AUTO pptx commit" --body "AUTO pptx commit" --base master --head pptx-convert-${{ github.run_id }}

  final_merge:
    needs: [convert]
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: write
    steps:
      - uses: actions/checkout@v2
      - name: Set up GitHub CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" > ~/.gh_token
      - name: Merge Pull Request
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr merge ${{ github.event.pull_request.number }} --squash --auto
