name: Pptx to Image
on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
  # push:
  #   paths:
  #     - 'quiz/*'

jobs:
  build:
    if: github.actor == 'ogawa3427' || github.actor == 'MAPLE0212'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      statuses: write
      checks: write
    defaults:
      run:
        working-directory: ./quiz
    steps:
      - uses: actions/checkout@v2
      
      - name: hello
        run: echo "hello"
        
      # - name: Update ImageMagick policy
      #   run: |
      #     sudo sed -i 's/<policy domain="coder" rights="none" pattern="PDF"/<policy domain="coder" rights="read|write" pattern="PDF"/' /etc/ImageMagick-6/policy.xml

      # - name: Install dependencies
      #   run: |
      #     sudo apt update
      #     sudo apt install -y tree
      #     tree -L 2
      #     sudo apt install -y libreoffice
      #     sudo apt install poppler-utils
      #     sudo apt install -y fonts-hanazono fonts-ipafont-gothic fonts-ipafont-mincho
      #     # 必要なフォントをインストール
      #     sudo apt install -y fonts-hanazono fonts-ipafont-gothic fonts-ipafont-mincho

      # - name: Check if PPTX file exists
      #   run: |
      #     if [ ! -f "quiz.pptx" ]; then
      #       echo "PPTX file does not exist"
      #       exit 1
      #     fi

      # - name: Convert PPTX to Image
      #   run: |
      #     ls -la
      #     libreoffice --headless --convert-to pdf quiz.pptx --outdir .
      #     ls -la
      #     if [ ! -f "quiz.pdf" ]; then
      #       echo "PDF conversion failed"
      #       exit 1
      #     fi
      #     pdftoppm -png quiz.pdf quiz

  status_check:
    needs: build
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    permissions:
      contents: write
      pull-requests: write
      statuses: write
      checks: write
    steps:
      - name: Check status
        run: echo "Status check passed"
      - name: Create status check
        run: |
          gh api repos/${{ github.repository }}/statuses/${{ github.sha }} \
            -f state=success \
            -f context="Status Check" \
            -f description="The build passed successfully" \
            -f target_url="${{ github.event.pull_request.html_url }}"
          gh api repos/${{ github.repository }}/statuses/${{ github.sha }} \
            -f state=success \
            -f context="Check" \
            -f description="The check passed successfully" \
            -f target_url="${{ github.event.pull_request.html_url }}"

  merge:
    if: github.event_name == 'pull_request'
    needs: [build, status_check]
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: write
    steps:
      - uses: actions/checkout@v2  # リポジトリをチェックアウト
      - name: Set up GitHub CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" > ~/.gh_token
      - name: merge
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr merge ${{ github.event.number }} --squash --auto
          # gh pr close ${{ github.event.number }}

  commit_changes:
    needs: [build, merge]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "Convert PPTX to Image"
          commit_user_name: "github-actions[bot]"
          commit_user_email: "github-actions[bot]@users.noreply.github.com"
          commit_author: "github-actions[bot] <github-actions[bot]@users.noreply.github.com>"
          branch: ${{ github.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}
